Importing libraries

import pandas as pd
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import nltk
import re
import string
import math
nltk.download('stopwords')
stemmer = nltk.SnowballStemmer("english")
from nltk.corpus import stopwords

Load dataset

pddf = pd.read_csv('Dataset-SA.csv')

pddf.shape

pddf.describe()

pddf.info()

pdDF = pddf.copy()

pdDF.equals(pddf)

left aligning the rows

pdDF.isnull().sum()

pdDF.dropna(inplace=True)

pdDF = pdDF.drop_duplicates(keep = False)

function to clean and preprocess text

def clean(text):
    text = str(text).lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    text=" ".join(text)
    text=" ".join(text)
    return text
pdDF["Review"] = pdDF["Review"].apply(clean)


dropping rows that contain text on price and rate columns

pdDF['product_price'] = pd.to_numeric(pdDF['product_price'], errors='coerce')
pdDF['Rate'] = pd.to_numeric(pdDF['Rate'], errors='coerce')
pdDF = pdDF.dropna(subset=['product_price', 'Rate'], how='all')

initcap

def capitalize_if_string(text):
    if isinstance(text, str):
        return text.capitalize()
    else:
        return text

pdDF['Review'] = pdDF['Review'].apply(capitalize_if_string)
pdDF['Summary'] = pdDF['Summary'].apply(capitalize_if_string)
pdDF['Sentiment'] = pdDF['Sentiment'].apply(capitalize_if_string)

rounding off decimals

pdDF['product_price'] = pdDF['product_price'].round(0)
pdDF['Rate'] = pdDF['Rate'].round(0)

def remove_stopwords(word_list):
    processed_word_list = []
    for word in word_list:
        word = word.lower()
        if word not in stopwords.words("english"):
            processed_word_list.append(word)
    return processed_word_list

calling the function

pdDF is pddf

pdDF['Stopwords_Review'] = pdDF['Review'].apply(lambda x: remove_stopwords(x.split()) if isinstance(x, str) else x)
pdDF['Stopwords_Summary'] = pdDF['Summary'].apply(lambda x: remove_stopwords(x.split()) if isinstance(x, str) else x)

pdDF

pdDF['product_name'] = pdDF['product_name'].str.replace('?', '')

pdDF

pdDF = pdDF.style.set_properties(**{'text-align': 'left'})
pdDF

